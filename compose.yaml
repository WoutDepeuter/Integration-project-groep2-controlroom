services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    container_name: elasticsearch
    restart: always
    volumes:
      - elastic_data:/usr/share/elasticsearch/data/
    environment:
      - xpack.security.enabled=true
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xmx256m -Xms256m
      - discovery.type=single-node
      - xpack.ml.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    networks:
      - monitoring
    healthcheck:
      test: [ "CMD", "curl", "-f", "-u", "elastic:${ELASTIC_PASSWORD}", "-X", "GET", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=1s" ]
      interval: 5s
      timeout: 3s
      retries: 10

  setup:
    image: appropriate/curl
    networks:
      - monitoring
    depends_on:
      elasticsearch:
        condition: service_healthy
    entrypoint: >
      sh -c 'curl -X POST -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}";'
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.0
    container_name: kibana
    restart: always
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - '30071:5601'
    environment:
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup:
        condition: service_completed_successfully
    networks:
      - monitoring

  logstash:
    image: docker.elastic.co/logstash/logstash:9.0.0
    container_name: logstash
    restart: always
    volumes:
      - ./logstash/:/logstash_dir
    command: logstash -f /logstash_dir/pipeline/logstash.conf
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '2'
    networks:
      - monitoring
      - attendify_net

  filebeat:
    build:
      context: ./beats/filebeat/
    container_name: filebeat
    restart: always
    user: root
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - logstash
    networks:
      - monitoring

  metricbeat:
    build:
      context: ./beats/metricbeat/
    container_name: metricbeat
    restart: always
    user: root
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - monitoring
      - attendify_net

  heartbeat-monitor:
    image: ghcr.io/woutdepeuter/integration-project-groep2-controlroom:latest
    depends_on:
      - elasticsearch
    environment:
      - "ELASTIC_URL=http://elasticsearch:9200"
      - "INDEX_NAME=heartbeat"
      - "RABBITMQ_HOST=${RABBITMQ_HOST}"
      - "RABBITMQ_PORT=${RABBITMQ_PORT}"
      - "RABBITMQ_VHOST=${RABBITMQ_VHOST}"
      - "RABBITMQ_USER=${RABBITMQ_USER}"
      - "RABBITMQ_PASS=${RABBITMQ_PASS}"
      - "ELASTIC_PASSWORD=${ELASTIC_PASSWORD}"
    networks:
      - monitoring
      - attendify_net

networks:
  monitoring: {}
  attendify_net:
      external: true

volumes:
  elastic_data: {}
